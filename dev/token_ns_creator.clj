(ns token-ns-creator
  (:gen-class)
  (:require [de.npexception.spacetraders-clj.core]
            [clojure.string :as str]))

(defn ^:private auth-type
  [fn-var]
  (-> (meta fn-var)
      :arglists
      ffirst
      (case
        'token :token-vars
        :basic-vars)))


(defn ^:private find-candidates
  []
  (->> (ns-publics 'de.npexception.spacetraders-clj.core)
       (map val)
       (filter (comp :arglists meta))                       ;; find functions
       (sort-by (comp :name meta))
       (group-by auth-type)))


(defn ^:private add-arg-name
  "Adds a name symbol to the argument if it is a destructuring map or vector"
  [idx arg]
  (cond
    (and (map? arg) (not (:as arg)))
    (assoc arg :as (symbol (str "_arg__" idx)))
    (and (vector? arg) (not= :as (last (butlast arg))))
    (conj arg :as (symbol (str "_arg__" idx)))
    :else arg))


(defn ^:private arg-name
  "Extracts the name-symbol from map or vector destructuring/vararg arguments"
  [arg]
  (cond
    (map? arg) (:as arg)
    (vector? arg) (last arg)
    :else arg))

(defn ^:private extract-args
  [args-vector]
  (let [[mandatory _ varargs] (partition-by #{'&} args-vector)]
    (conj
      (mapv arg-name mandatory)
      (or (arg-name (first varargs)) []))))

(defn ^:private target-sym
  [ns sym]
  (symbol (name ns) (name sym)))


(defn build-doc-str
  [doc]
  (some-> (pr-str doc)
          (str/replace "\\n" "\n")
          (->> (str "\n  "))))

;; TODO: check if this can be done with clj-fmt instead of building strings manually

(defn generate-namespace-file
  []
  (let [{:keys [token-vars basic-vars]} (find-candidates)
        contents (concat
                   [(str "(ns de.npexception.spacetraders-clj.core-with-token"
                         "\n  \"Autogenerated namespace where token-taking functions instead take it from the system environment.\""
                         "\n  (:require [de.npexception.spacetraders-clj.core :as core]))")
                    "(def ^:private token (delay (System/getenv \"SPACE_TRADERS_TOKEN\")))"]
                   ;; add defs for all non token-taking functions
                   (for [basic-var basic-vars
                         :let [{:keys [name doc]} (meta basic-var)]]
                     (str "(def " name
                          (build-doc-str doc)
                          "\n  core/" name ")"))
                   ;; add defs for all token-taking functions
                   (for [token-var token-vars
                         :let [{:keys [name doc arglists]} (meta token-var)
                               args-vec (vec (map-indexed add-arg-name (nfirst arglists)))]]
                     (str "(defn " name
                          (build-doc-str doc)
                          "\n  " (pr-str args-vec)
                          "\n  (apply core/" name " @token " (str/join " " (extract-args args-vec)) "))")))]
    (spit "./src/de/npexception/spacetraders_clj/core_with_token.clj"
          (str (str/join "\n\n" contents) \newline))))


(defn -main [& args]
  (generate-namespace-file))


(comment
  (generate-namespace-file)
  )